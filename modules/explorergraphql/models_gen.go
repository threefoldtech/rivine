// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package explorergraphql

import (
	"fmt"
	"io"
	"strconv"
)

type Contract interface {
	IsContract()
}

type Object interface {
	IsObject()
}

type Transaction interface {
	IsTransaction()
}

type UnlockCondition interface {
	IsUnlockCondition()
}

type UnlockFulfillment interface {
	IsUnlockFulfillment()
}

type Wallet interface {
	IsWallet()
}

type AtomicSwapCondition struct {
	Version      string                 `json:"Version"`
	UnlockHash   string                 `json:"UnlockHash"`
	Sender       *AtomicSwapParticipant `json:"Sender"`
	Receiver     *AtomicSwapParticipant `json:"Receiver"`
	HashedSecret string                 `json:"HashedSecret"`
	TimeLock     string                 `json:"TimeLock"`
}

func (AtomicSwapCondition) IsUnlockCondition() {}

type AtomicSwapContract struct {
	UnlockHash          string                 `json:"UnlockHash"`
	ContractCondition   *AtomicSwapCondition   `json:"ContractCondition"`
	ContractFulfillment *AtomicSwapFulfillment `json:"ContractFulfillment"`
	ContractValue       string                 `json:"ContractValue"`
	BlockHeight         string                 `json:"BlockHeight"`
	BlockTime           string                 `json:"BlockTime"`
	Transactions        []Transaction          `json:"Transactions"`
	CoinInputs          []*Input               `json:"CoinInputs"`
	CoinOutputs         []*Output              `json:"CoinOutputs"`
}

func (AtomicSwapContract) IsObject()   {}
func (AtomicSwapContract) IsContract() {}

type AtomicSwapFulfillment struct {
	Version         string          `json:"Version"`
	ParentCondition UnlockCondition `json:"ParentCondition"`
	PublicKey       string          `json:"PublicKey"`
	Signature       string          `json:"Signature"`
	Secret          *string         `json:"Secret"`
}

func (AtomicSwapFulfillment) IsUnlockFulfillment() {}

type AtomicSwapParticipant struct {
	UnlockHash string  `json:"UnlockHash"`
	PublicKey  *string `json:"PublicKey"`
}

type Balance struct {
	Unlocked string `json:"Unlocked"`
	Locked   string `json:"Locked"`
}

type Block struct {
	Header       *BlockHeader  `json:"Header"`
	Transactions []Transaction `json:"Transactions"`
}

func (Block) IsObject() {}

type BlockHeader struct {
	ID          string         `json:"ID"`
	BlockTime   *string        `json:"BlockTime"`
	BlockHeight *string        `json:"BlockHeight"`
	Payouts     []*BlockPayout `json:"Payouts"`
}

type BlockPayout struct {
	Output *Output          `json:"Output"`
	Type   *BlockPayoutType `json:"Type"`
}

type FeePayout struct {
	Output *Output `json:"Output"`
	Value  string  `json:"Value"`
}

type Input struct {
	ID          string            `json:"ID"`
	Value       string            `json:"Value"`
	Fulfillment UnlockFulfillment `json:"Fulfillment"`
	Parent      *Output           `json:"Parent"`
}

func (Input) IsObject() {}

type LockTimeCondition struct {
	Version    string          `json:"Version"`
	UnlockHash *string         `json:"UnlockHash"`
	LockValue  string          `json:"LockValue"`
	LockType   LockType        `json:"LockType"`
	Condition  UnlockCondition `json:"Condition"`
}

func (LockTimeCondition) IsUnlockCondition() {}

type MintCoinCreationTransaction struct {
	ID               string            `json:"ID"`
	Version          string            `json:"Version"`
	BlockID          string            `json:"BlockID"`
	BlockHeight      *string           `json:"BlockHeight"`
	BlockTimestamp   *string           `json:"BlockTimestamp"`
	TransactionOrder *int              `json:"TransactionOrder"`
	Nonce            string            `json:"Nonce"`
	MintCondition    UnlockCondition   `json:"MintCondition"`
	MintFulfillment  UnlockFulfillment `json:"MintFulfillment"`
	CoinInputs       []*Input          `json:"CoinInputs"`
	CoinOutputs      []*Output         `json:"CoinOutputs"`
	FeePayouts       []*FeePayout      `json:"FeePayouts"`
	ArbitraryData    *string           `json:"ArbitraryData"`
}

func (MintCoinCreationTransaction) IsObject()      {}
func (MintCoinCreationTransaction) IsObject()      {}
func (MintCoinCreationTransaction) IsTransaction() {}

type MintCoinDestructionTransaction struct {
	ID               string       `json:"ID"`
	Version          string       `json:"Version"`
	BlockID          string       `json:"BlockID"`
	BlockHeight      *string      `json:"BlockHeight"`
	BlockTimestamp   *string      `json:"BlockTimestamp"`
	TransactionOrder *int         `json:"TransactionOrder"`
	CoinInputs       []*Input     `json:"CoinInputs"`
	CoinOutputs      []*Output    `json:"CoinOutputs"`
	FeePayouts       []*FeePayout `json:"FeePayouts"`
	ArbitraryData    *string      `json:"ArbitraryData"`
}

func (MintCoinDestructionTransaction) IsTransaction() {}

type MintConditionDefinitionTransaction struct {
	ID               string            `json:"ID"`
	Version          string            `json:"Version"`
	BlockID          string            `json:"BlockID"`
	BlockHeight      *string           `json:"BlockHeight"`
	BlockTimestamp   *string           `json:"BlockTimestamp"`
	TransactionOrder *int              `json:"TransactionOrder"`
	Nonce            string            `json:"Nonce"`
	MintCondition    UnlockCondition   `json:"MintCondition"`
	MintFulfillment  UnlockFulfillment `json:"MintFulfillment"`
	NewMintCondition UnlockCondition   `json:"NewMintCondition"`
	CoinInputs       []*Input          `json:"CoinInputs"`
	CoinOutputs      []*Output         `json:"CoinOutputs"`
	FeePayouts       []*FeePayout      `json:"FeePayouts"`
	ArbitraryData    *string           `json:"ArbitraryData"`
}

func (MintConditionDefinitionTransaction) IsObject()      {}
func (MintConditionDefinitionTransaction) IsTransaction() {}

type MultiSignatureCondition struct {
	Version                string    `json:"Version"`
	UnlockHash             string    `json:"UnlockHash"`
	UnlockHashes           []*string `json:"UnlockHashes"`
	RequiredSignatureCount int       `json:"RequiredSignatureCount"`
}

func (MultiSignatureCondition) IsUnlockCondition() {}

type MultiSignatureFulfillment struct {
	Version         string          `json:"Version"`
	ParentCondition UnlockCondition `json:"ParentCondition"`
	PublicKeys      []string        `json:"PublicKeys"`
	Signatures      []string        `json:"Signatures"`
}

func (MultiSignatureFulfillment) IsUnlockFulfillment() {}

type MultiSignatureWallet struct {
	UnlockHash             string                       `json:"UnlockHash"`
	Owners                 []*MultiSignatureWalletOwner `json:"Owners"`
	RequiredSignatureCount *int                         `json:"RequiredSignatureCount"`
	BlockHeight            string                       `json:"BlockHeight"`
	BlockTime              string                       `json:"BlockTime"`
	Transactions           []Transaction                `json:"Transactions"`
	CoinInputs             []*Input                     `json:"CoinInputs"`
	CoinOutputs            []*Output                    `json:"CoinOutputs"`
	BlockStakeInputs       []*Input                     `json:"BlockStakeInputs"`
	BlockStakeOutputs      []*Output                    `json:"BlockStakeOutputs"`
	CoinBalance            *Balance                     `json:"CoinBalance"`
	BlockStakeBalance      *Balance                     `json:"BlockStakeBalance"`
}

func (MultiSignatureWallet) IsObject() {}
func (MultiSignatureWallet) IsWallet() {}

type MultiSignatureWalletOwner struct {
	UnlockHash string  `json:"UnlockHash"`
	PublicKey  *string `json:"PublicKey"`
}

type NilCondition struct {
	Version    string `json:"Version"`
	UnlockHash string `json:"UnlockHash"`
}

func (NilCondition) IsUnlockCondition() {}

type Output struct {
	ID        string          `json:"ID"`
	Value     string          `json:"Value"`
	Condition UnlockCondition `json:"Condition"`
	Sibling   *Input          `json:"Sibling"`
}

func (Output) IsObject() {}

type SingleSignatureFulfillment struct {
	Version         string          `json:"Version"`
	ParentCondition UnlockCondition `json:"ParentCondition"`
	PublicKey       string          `json:"PublicKey"`
	Signature       string          `json:"Signature"`
}

func (SingleSignatureFulfillment) IsUnlockFulfillment() {}

type SingleSignatureWallet struct {
	UnlockHash            string                  `json:"UnlockHash"`
	PublicKey             *string                 `json:"PublicKey"`
	MultiSignatureWallets []*MultiSignatureWallet `json:"MultiSignatureWallets"`
	BlockHeight           string                  `json:"BlockHeight"`
	BlockTime             string                  `json:"BlockTime"`
	Transactions          []Transaction           `json:"Transactions"`
	CoinInputs            []*Input                `json:"CoinInputs"`
	CoinOutputs           []*Output               `json:"CoinOutputs"`
	BlockStakeInputs      []*Input                `json:"BlockStakeInputs"`
	BlockStakeOutputs     []*Output               `json:"BlockStakeOutputs"`
	CoinBalance           *Balance                `json:"CoinBalance"`
	BlockStakeBalance     *Balance                `json:"BlockStakeBalance"`
}

func (SingleSignatureWallet) IsObject() {}
func (SingleSignatureWallet) IsWallet() {}

type StandardTransaction struct {
	ID                string       `json:"ID"`
	Version           string       `json:"Version"`
	BlockID           string       `json:"BlockID"`
	BlockHeight       *string      `json:"BlockHeight"`
	BlockTimestamp    *string      `json:"BlockTimestamp"`
	TransactionOrder  *int         `json:"TransactionOrder"`
	CoinInputs        []*Input     `json:"CoinInputs"`
	CoinOutputs       []*Output    `json:"CoinOutputs"`
	BlockStakeInputs  []*Input     `json:"BlockStakeInputs"`
	BlockStakeOutputs []*Output    `json:"BlockStakeOutputs"`
	FeePayouts        []*FeePayout `json:"FeePayouts"`
	ArbitraryData     *string      `json:"ArbitraryData"`
}

func (StandardTransaction) IsObject()      {}
func (StandardTransaction) IsTransaction() {}

type UnlockHashCondition struct {
	Version    string `json:"Version"`
	UnlockHash string `json:"UnlockHash"`
}

func (UnlockHashCondition) IsUnlockCondition() {}

type BlockPayoutType string

const (
	BlockPayoutTypeBlockReward    BlockPayoutType = "BLOCK_REWARD"
	BlockPayoutTypeTransactionFee BlockPayoutType = "TRANSACTION_FEE"
)

var AllBlockPayoutType = []BlockPayoutType{
	BlockPayoutTypeBlockReward,
	BlockPayoutTypeTransactionFee,
}

func (e BlockPayoutType) IsValid() bool {
	switch e {
	case BlockPayoutTypeBlockReward, BlockPayoutTypeTransactionFee:
		return true
	}
	return false
}

func (e BlockPayoutType) String() string {
	return string(e)
}

func (e *BlockPayoutType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BlockPayoutType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BlockPayoutType", str)
	}
	return nil
}

func (e BlockPayoutType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LockType string

const (
	LockTypeBlockHeight LockType = "BLOCK_HEIGHT"
	LockTypeTimestamp   LockType = "TIMESTAMP"
)

var AllLockType = []LockType{
	LockTypeBlockHeight,
	LockTypeTimestamp,
}

func (e LockType) IsValid() bool {
	switch e {
	case LockTypeBlockHeight, LockTypeTimestamp:
		return true
	}
	return false
}

func (e LockType) String() string {
	return string(e)
}

func (e *LockType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LockType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LockType", str)
	}
	return nil
}

func (e LockType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
